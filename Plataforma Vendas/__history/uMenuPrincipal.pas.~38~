unit uMenuPrincipal;

interface

uses
  Winapi.Windows, Winapi.Messages, System.SysUtils, System.Variants, System.Classes, Vcl.Graphics,
  Vcl.Controls, Vcl.Forms, Vcl.Dialogs, uDtM, Vcl.Buttons, Vcl.ExtCtrls, Vcl.StdCtrls;

type
  TMenuPrincipal = class(TForm)
    Panel1: TPanel;
    ovSP_Cadastro: TSpeedButton;
    ovSB_Venda: TSpeedButton;
    Panel2: TPanel;
    ovL_Descricao: TLabel;
    Label1: TLabel;
    ovTImg_Logo: TImage;
    Panel3: TPanel;
    procedure FormCreate(Sender: TObject);
    procedure ovSP_CadastroClick(Sender: TObject);
    procedure FormDestroy(Sender: TObject);
    procedure ovSB_VendaClick(Sender: TObject);
  private
    { Private declarations }
  public
    { Public declarations }
  end;

const
  csIp : String = '127.0.0.1';
  csPort : String = '3306';
  csDatabase : String = 'plataformavenda';
  csUser : String = 'admin';
  csPasw : String = 'admin';

var
  MenuPrincipal: TMenuPrincipal;
  ArqConfig : TIniFile;
  vsServer, vsPort, vsDatabase, vsUser, vsPassw : String;

implementation

uses
  uCadProduto, uLancamento, uConfig;

{$R *.dfm}

procedure TMenuPrincipal.FormCreate(Sender: TObject);
begin
  DtM := TDtM.Create(Self);

  if not FileExists(ExtractFilePath(Application.ExeName) + '\Config.ini') then
  begin
    try
      Config := TConfig.Create(Self);
      Config.ShowModal;
    finally
      FreeAndNil(Config);
    end;
  end;


  if FileExists(ExtractFilePath(Application.ExeName) + '\Config.ini') then
  begin
    ArqConfig := TIniFile.Create(ExtractFilePath(Application.ExeName) + '\Config.ini');

    DtM.FDPhysMySQLDriverLink.VendorLib := ExtractFilePath(Application.ExeName) + 'libmySQL.dll';

    vsServer := ArqConfig.ReadString('BANCO', 'server', vsServer);
    vsPort := ArqConfig.ReadString('BANCO', 'port', vsPort);
    vsDatabase := ArqConfig.ReadString('BANCO', 'base', vsDatabase);
    vsUser := ArqConfig.ReadString('BANCO', 'user', vsUser);
    vsPassw := ArqConfig.ReadString('BANCO', 'passw', vsPassw);

    DtM.FDConnection.Params.Clear;
    DtM.FDConnection.Params.Add('DriverID=MySQL');
    DtM.FDConnection.Params.Add('CharacterSet=utf8');
    DtM.FDConnection.Params.Add('Server='+ vsServer;
    DtM.FDConnection.Params.Add('Port='+ vsPort);
    DtM.FDConnection.Params.Add('Database=' + vsDatabase);
    DtM.FDConnection.Params.Add('User_Name=' + vsUser);
    DtM.FDConnection.Params.Add('Password=' + vsPassw);
    DtM.FDConnection.Connected := True;
  end else
  begin
    ShowMessage('Não encontrado configuração com o banco, finalizando sistema.');
    Application.Terminate;
  end;
end;

procedure TMenuPrincipal.FormDestroy(Sender: TObject);
begin
  try
    DtM.FDConnection.Connected := False;
    if Assigned(DtM) then
      FreeAndNil(DtM);
  except
    on e: exception do
      raise Exception.Create(E.Message);
  end;
end;

procedure TMenuPrincipal.ovSB_VendaClick(Sender: TObject);
begin
  try
    LancamentoPedido := TLancamentoPedido.Create(Self);
    LancamentoPedido.ShowModal;
  finally
    FreeAndNil(LancamentoPedido);
  end;
end;

procedure TMenuPrincipal.ovSP_CadastroClick(Sender: TObject);
begin
  try
    CadProduto := TCadProduto.Create(Self);
    CadProduto.ShowModal;
  finally
    FreeAndNil(CadProduto);
  end;
end;

end.
